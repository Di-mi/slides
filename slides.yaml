
# Copyright 2013 by Petr Viktorin <encukou@gmail.com>
# License: Creative Commons Attribution-ShareAlike 3.0 Unported
# http://creativecommons.org/licenses/by-sa/3.0/

- text: |
    ┌───────────────────────────────────────┐
    │                                       │
    │                                       │
    │                                       │
    │                                       │
    │                   X                   │♢animate X=/,-,\,|
    │                                       │
    │                                       │
    │        calibration in progress        │
    │                                       │
    │                                       │
    │         «deemph≈this shoud be visible»         │
    │                                       │
    │                                       │
    │                                       │
    │                                       │
    └───────────────────────────────────────┘

- text: |
    ♢



    «Terminals,»
    «Command Lines,»
    «and Text User Interfaces»





    Petr Viktorin
    encukou.cz

- text: |
    Hello! I'm «Petr Viktorin»

    I work at Red Hat
    on the FreeIPA project
    (Kerberos, LDAP, Active Directory)

    «deemph≈but this talk is not about that»
    ♢

- text: |
    I also help organize «Python meetups»

    Visiting «Brno» last Thursday of any month?
    → «python.cz» ♢


    «deemph≈but this talk is not about that»
    «deemph≈either»

- text: |
    The Console

    Terminal

    TTY
     «hide≈Note: History section will NOT be chronologically correct»

- text: |
    It all started with the «teletype» (teleprinter) «hide≈XXX: year!!!»

    printer + keyboard + wires

    «hide≈Computers caught up, batch→realtime»

- text: |
    UNIX:

    Everything is a file!

    disk device♢[1] .*
    pipe♢[2] .*
    directory♢[3] .*
    «      »regular files «deemph≈(boring!)»♢[4] .*
    TTY!♢[5] .*


- fixtext: |
    UNIX and terminals♢center

    ┌─────────┐               ┌────────┐
    │         │ <- stdin ---- │        │
    │         │               │ kernel │
    │ process │ -- stdout --> │  TTY   │
    │         │               │ driver │
    │         │ -- stderr --> │        │
    └─────────┘               └────────┘
                                 ^  |
                                 |  |
                                 |  |
                                 |  |
                                 |  v
                             ┌──────────┐
                             │ terminal │
                             └──────────┘

- fixtext: |
    Terminal emulators♢center

    ┌─────────┐               ┌────────┐
    │         │ <- stdin ---- │        │
    │         │               │ kernel │
    │ process │ -- stdout --> │  TTY   │
    │         │               │ driver │
    │         │ -- stderr --> │        │
    └─────────┘               ├────────┤
                              │ Pseudo │
                Backspace     │  TTY   │ ♢ [1] Backspace♢Note: briefly explain line discipline
              "Input mode"    ├────────┤ ♢ [2] "Input mode"
                   ^C         │  TTY   │ ♢ [3] \^C
                   ^Z         │emulator│ ♢ [3] \^Z
                      ┌───────┴────────┴─┐
                      │ Graphical system │
                      └──────────────────┘



- diversion: true  # XXX
  align: left
  text:
    $ stty -a


    speed 38400 baud; rows 45; columns 266; line = 0;
    intr = ^C; quit = ^\; erase = ^?; kill = ^U; eof = ^D; eol = <undef>; eol2 = <undef>; swtch = <undef>; start = ^Q; stop = ^S; susp = ^Z; rprnt = ^R; werase = ^W; lnext = ^V; flush = ^O; min = 1; time = 0;
    -parenb -parodd cs8 -hupcl -cstopb cread -clocal -crtscts
    -ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl ixon ixoff -iuclc -ixany -imaxbel iutf8
    opost -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0
    isig icanon iexten echo echoe echok -echonl -noflsh -xcase -tostop -echoprt echoctl echoke

- fixtext: |
    Features  «»♢center

    ┌─────────┐               ┌────────┐
    │         │ <- stdin ---- │        │
    │         │               │terminal│
    │ process │ -- stdout --> │        │
    │         │               │        │
    │         │ -- stderr --> │        │
    └─────────┘               └────────┘
        Character sets                   ♢[9] Character sets
                Backspace      Underline ♢[4] Underline
              "Input mode"
       Bold        ^C        Mouse       ♢[2] Bold♢[11] Mouse
     Blinking      ^Z   Unicode          ♢[5] Blinking♢[12] Unicode
               Window size (ioctl)       ♢[7] Window size♢[8] .ioctl.
             Cursor movement             ♢[1] Cursor movement
            More Colors!         Beep    ♢[3] Colors♢[6] Beep♢[10] More♢[10] !


- fixtext: |
    «»




                   «Ugh».



        Character sets
                Backspace      Underline ♢
              "Input mode"
       Bold        ^C        Mouse
     Blinking      ^Z   Unicode
               Window size (ioctl)
             Cursor movement
            More Colors!         Beep


- text: |
    Why do I use this?

    TUIs are «simple»


    «print»('Hello world!')          «»
    raw_«input»('What is your name?')


- text: |
    Why do I use this?

    TUIs are «simple»


    No need for a designer


- text: |
    Why do I use this?

    TUIs are simple, «universal»


    Ever seen a computer without a command line?
    Would you want to use it?♢[1] .*
    as a computer?♢[2] .*


- text: |
    Why do I use this?

    TUIs are simple, universal, «scriptable»


    git branch «|» grep '\*' «|» cut -c3-


- text: |
    Why do I use this?

    TUIs are simple, universal, scriptable, «lightweight»


    These slides take «hide≈XXX:Number!» a couple of «kilobytes»
    «hide≈Full video with timing information: X kB»♢[1] .*


- text: |
    Why do I use this?

    TUIs are simple, universal, scriptable, lightweight, «cool»


    At least for «you» ♢[1] .*


- fixtext: |
    Types of TUIs♢center

    • Line-based
        cat, grep, git♢[1] .*
        «simple, universal»♢[3] .*
        «scriptable, lightweight»♢[3] .*

    • Full-screen
        less, vim, mc♢[2] .*
        «cool»♢[4] .*


- fixtext: |
    How to build a text user interface♢center♢@deemph[1]text
    ♢reveal[2]
    • Decide on the type♢@emph[2] \w.*
        Line-based? Full-screen TUI?♢reveal[3]
        Traditional GUI? Web UI?♢@deemph[4] Web UI.♢@deemph[5] Traditional GUI.
    ♢reveal[4]
    • Parse command-line arguments♢@emph[4] \s.*♢XXX:Example?♢XXX:Strict conventions; very important - can't easily change later, like designing API
    ♢reveal[5]
    • Output the output♢@emph[5] \s.*
    ♢reveal[6]
    • Handle input♢@emph[6] \w.*


- text: |
    Tools of the trade

    argparse, docopt, termcolor, blessings, colorama, clint, curses, urwid


- text: |
    import «argparse»
    «hide≈no optparse please»
    parses command-line arguments
    part of stdlib

    «hide≈XXX: Program: listing, output»
    «hide≈XXX: Makes the help string for you - strict »


- text: |
    import «docopt» «hide≈XXX: Github link»

    command-line parsing upside-down:
    you write the usage text, docopt uses that

    «hide≈XXX: Program: listing, output»


- fixtext: |
    A note on documentation♢center


    • --help option
        cheatsheet
    • man page
        tersely explains everything
    • website (tutorial)
        teaches


- text: |
    import «termcolor» «hide≈XXX: Github link»

    Simple colorization 

    Outputs ANSI escape sequences♢@emph[1] ANSI

    «hide≈XXX: Program: listing, output»


- text: |
    import «colorama» «hide≈XXX: Github link»

    Colorization wrapper for Windows

    Replaces the sys.stdout & stderr objects, intercepts ANSI sequences, calls appropriate Windows functions

    No-op on systems that understand ANSI
    «deemph≈(by default)»

    «hide≈XXX: Program?: listing?, output?»


- text: |
    import «blessings» «hide≈XXX: Github link»

    Output colorization (ANSI sequences, «hide≈XXX:termcap»)
    Simple
    ♢reveal[1]
    Pipe-savvy

    «hide≈XXX: Program?: listing?, output?»


- text: |
    Pipe friendliness

    Default to color only for terminals

    Provide a way to force color on or off


- text: |
    import «clint» «hide≈XXX: Github link»

    Kitchen sink
    colors, indents, columns, progress bars, implicit arguments, English-language join(), interactive prompting
    ♢reveal[1]
    TODO: unit tests, docs, py3k

    «hide≈XXX: Program?: listing?, output?»


- text: |
    import «tty»

    setcbreak()
    setraw()

    ----------------------♢hr

    import «termios»

    Posix calls for tty I/O control


- pygments: true  # XXX
  fixtext: |
    import sys, tty
    from termios import tcgetattr
    from termios import tcsetattr

    old = None
    try:
      if sys.stdin.isatty():
        old = tcgetattr(sys.stdin)
        tty.setcbreak(sys.stdin)  # XXX

      print(sys.stdin.read(1))

    finally:
      if old is not None:
        f = termios.TCSAFLUSH
        tcsetattr(sys.stdin, f, old)

- text: |
    import «curses»

    80s era C library, wrapped in Python «hide≈no buzzwords like “pythonic”; e.g. characters are ints»
    stdlib

    Either you're an expert,
    or you find a snippet for your usage on StackOverflow


- text: |
    import «urwid»

    (What I used for these slides)

    Widget-based TUI library

    Multiple backends (curses, terminal, web)


- text: |
    Urwid widgets

    ♢fib

    ♢progressbar


- text: |
    Mouse input


    MainLoop(handle_mouse=False)


- text: |
    «»




    Keep it simple!
    ♢reveal[1]

    questions?





    ♢hr
    © 2013 Petr Viktorin, http://encukou.cz
    CC-BY-SA

# XXX: Github? Mercurial/Googlecode?
# XXX: Python 3 compatibility?
